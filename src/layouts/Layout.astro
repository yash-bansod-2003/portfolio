---
interface Props {
	title: string;
}

import "@fontsource/bai-jamjuree/400.css";
import "@fontsource/bai-jamjuree/500.css";
import "@fontsource/bai-jamjuree/600.css";
import "@fontsource/bai-jamjuree/700.css";

import { siteConfig } from "@/config/site";

const { title } = Astro.props;
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content={siteConfig.description} />
		<meta
			name="viewport"
			content="width=device-width"
			initial-scale="1.0"
		/>
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<meta property="og:title" content={`${siteConfig.name} portfolio`} />
		<meta property="og:type" content="portfolio" />
		<meta property="og:url" content={siteConfig.url} />
		<meta property="og:image" content={`${siteConfig.url}/og.png`} />
		<meta property="og:site_name" content={siteConfig.name} />
		<meta property="og:description" content={siteConfig.description} />
		<title>{title}</title>
	</head>
	<body>
		<slot />
	</body>
</html>
<style is:global lang="scss">
	:root {
		--background: #fafafa;
		--text: #000;
		--text-light: #555;
	}

	html.dark {
		--background: #000;
		--text: #fafafa;
		--text-light: rgba(225, 225, 225, 0.9);
	}
	/*

	@custom-media --mobile (width <= 480px);
	@custom-media --tablet (481px <= width <= 768px);
	@custom-media --laptop (769px <= width <= 1024px);
	@custom-media --desktop (1025 <= width <= 1200px);
	@custom-media --tv (width >= 1201px);

	//  Tablet 
	@media (481px <= width <= 768px) {
		background-color: aqua;
	}

	// Laptop
	@media (769px <= width <= 1024px) {
		background-color: red;
	}

	// Desktop
	@media (1025 <= width <= 1200px) {
		background-color: green;
	}

	// TV
	@media (width >= 1201px) {
		background-color: green;
	}
	*/

	*,
	*::before,
	*::after {
		margin: 0;
		padding: 0;
		box-sizing: border-box;
	}

	a,
	button,
	input,
	select,
	textarea,
	:focus {
		outline: none;
	}

	a {
		text-decoration: none;
	}

	ul,
	ol {
		list-style: none;
	}

	html {
		font-size: 62.5%;
	}

	p {
		font-weight: 400;
	}

	h2 {
		font-weight: 700;
	}

	body {
		font-family: "Bai Jamjuree", sans-serif;
		// font-family: 'Roboto Condensed', sans-serif;
		color: var(--text);
		background-color: var(--background);
	}

	/* Utility Classes  */
	.container {
		width: 100vw;
		max-width: 1200px;
		margin: 0 auto;
		padding: 0 1rem;
		// Laptop
		@media (769px <= width) {
			padding: 0;
		}
	}

	.icon {
		width: 4rem;
		height: 4rem;
		display: flex;
		align-items: center;
		justify-content: center;
		cursor: pointer;

		//  Tablet
		@media (481px <= width <= 768px) {
			width: 4.8rem;
			height: 4.8rem;
		}
	}


	.theme__icon {
		outline: none;
		border: none;
		background: var(--background);
		color: var(--text);
		height: 3.2rem;
		
		svg {
			width: 3.2rem;
			aspect-ratio: 1/1;
		}
	}

	.btn {
		display: flex;
		align-items: center;
		justify-content: center;
		width: fit-content;
		background-color: var(--text);
		color: var(--background);
		border: 0.1rem solid var(--background);
		font-size: 1.6rem;
		transition: all 0.3s ease-in-out;

		&:hover {
			background-color: var(--background);
			color: var(--text);
			border: 0.1rem dotted var(--text);
		}
	}

	.btn-outline {
		background-color: var(--background);
		color: var(--text);
		border: 0.1rem solid var(--text);

		&:hover {
			background-color: var(--text);
			color: var(--background);
			border: 0.1rem solid var(--background);
		}
	}
</style>

<script is:inline>
	const getThemePreference = () => {
		if (
			typeof localStorage !== "undefined" &&
			localStorage.getItem("theme")
		) {
			return localStorage.getItem("theme");
		}
		return window.matchMedia("(prefers-color-scheme: dark)").matches
			? "dark"
			: "light";
	};
	const isDark = getThemePreference() === "dark";
	document.documentElement.classList[isDark ? "add" : "remove"]("dark");

	if (typeof localStorage !== "undefined") {
		const observer = new MutationObserver(() => {
			const isDark = document.documentElement.classList.contains("dark");
			localStorage.setItem("theme", isDark ? "dark" : "light");
		});
		observer.observe(document.documentElement, {
			attributes: true,
			attributeFilter: ["class"],
		});
	}
</script>
